{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#leetcode","title":"LeetCode","text":""},{"location":"#summary-by-difficulty","title":"Summary by Difficulty","text":"<ul> <li> <p>Easy <sup>5</sup></p> </li> <li> <p>Medium <sup>9</sup></p> </li> <li> <p>Hard <sup>1</sup></p> </li> </ul>"},{"location":"easy/","title":"Difficulty - Easy","text":""},{"location":"easy/#just-a-moment","title":"Just a moment...","text":"Solution in Python Python <pre><code>from typing import List\n\n\nclass Solution:\n    def longestCommonPrefix(self, strs: List[str]) -&gt; str:\n        lengths = [len(s) for s in strs]\n        if 0 in lengths or not lengths:\n            return \"\"\n        else:\n            result = \"\"\n            index = 0\n\n            while index &lt; min(lengths):\n                character = set([s[index] for s in strs])\n                if len(character) &gt; 1:\n                    break\n                else:\n                    result += character.pop()\n                    index += 1\n\n            return result\n</code></pre>"},{"location":"easy/#just-a-moment_1","title":"Just a moment...","text":"Solution in Python Python <pre><code>class Solution:\n    def isPalindrome(self, x: int) -&gt; bool:\n        if x &lt; 0:\n            return False\n\n        a = 1\n        while x // a:\n            a *= 10\n        a //= 10\n\n        while x:\n            r = x % 10\n            l = x // a\n            if l != r:\n                return False\n            x = (x - l * a) // 10\n            a = a // 100\n\n        return True\n</code></pre>"},{"location":"easy/#just-a-moment_2","title":"Just a moment...","text":"Solution in Python Python <pre><code>class Solution:\n    def romanToInt(self, s: str) -&gt; int:\n        roman = {\"M\": 1000, \"D\": 500, \"C\": 100, \"L\": 50, \"X\": 10, \"V\": 5, \"I\": 1}\n        size = len(s)\n        prev = None\n        ans = 0\n        s = s[::-1]\n        for i in range(size):\n            if prev and roman[s[i]] &lt; prev:\n                ans -= 2 * roman[s[i]]\n            ans += roman[s[i]]\n            prev = roman[s[i]]\n        return ans\n</code></pre>"},{"location":"easy/#just-a-moment_3","title":"Just a moment...","text":"Solution in Python Python <pre><code>from typing import List\n\n\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -&gt; List[int]:\n        t = {}\n        l = len(nums)\n\n        for i in range(l):\n            if nums[i] not in t:\n                t[nums[i]] = [i]\n            else:\n                t[nums[i]].append(i)\n\n        for i in range(l):\n            lookup = target - nums[i]\n            if lookup != nums[i]:\n                if lookup in t:\n                    return (i, t[lookup][0])\n            else:\n                if len(t[lookup]) &gt; 1:\n                    return (t[lookup][0], t[lookup][1])\n</code></pre>"},{"location":"easy/#just-a-moment_4","title":"Just a moment...","text":"Solution in Python Python <pre><code>class Solution:\n    def isValid(self, s: str) -&gt; bool:\n        stack = []\n        for char in s:\n            if char in [\"(\", \"[\", \"{\"]:\n                stack.append(char)\n            elif char in [\")\", \"]\", \"}\"]:\n                if len(stack) == 0:\n                    return False\n                last = stack.pop()\n                if char == \")\" and last != \"(\":\n                    return False\n                elif char == \"]\" and last != \"[\":\n                    return False\n                elif char == \"}\" and last != \"{\":\n                    return False\n\n        return len(stack) == 0\n</code></pre>"},{"location":"hard/","title":"Difficulty - Hard","text":""},{"location":"hard/#just-a-moment","title":"Just a moment...","text":"Solution in Python Python <pre><code>from typing import List\n\n\nclass Solution:\n    def getKth(self, nums1: List[int], nums2: List[int], k: int) -&gt; int:\n        len1 = len(nums1)\n        len2 = len(nums2)\n        if len1 &gt; len2:\n            return self.getKth(nums2, nums1, k)\n        if len1 == 0:\n            return nums2[k - 1]\n        if k == 1:\n            return min(nums1[0], nums2[0])\n        pa = min(k // 2, len1)\n        pb = k - pa\n        if nums1[pa - 1] &lt;= nums2[pb - 1]:\n            return self.getKth(nums1[pa:], nums2, pb)\n        else:\n            return self.getKth(nums1, nums2[pb:], pa)\n\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -&gt; float:\n        len1 = len(nums1)\n        len2 = len(nums2)\n        if (len1 + len2) % 2 == 1:\n            return self.getKth(nums1, nums2, (len1 + len2) // 2 + 1)\n        else:\n            return (\n                self.getKth(nums1, nums2, (len1 + len2) // 2)\n                + self.getKth(nums1, nums2, (len1 + len2) // 2 + 1)\n            ) * 0.5\n</code></pre>"},{"location":"medium/","title":"Difficulty - Medium","text":""},{"location":"medium/#just-a-moment","title":"Just a moment...","text":"Solution in Python Python <pre><code>from typing import List\n\n\nclass Solution:\n    def threeSum(self, nums: List[int]) -&gt; List[List[int]]:\n        nums = sorted(nums)\n        ans = []\n        for i in range(len(nums) - 2):\n            if i == 0 or nums[i] &gt; nums[i - 1]:\n                l = i + 1\n                r = len(nums) - 1\n                while l &lt; r:\n                    if nums[i] + nums[l] + nums[r] == 0:\n                        ans.append([nums[i], nums[l], nums[r]])\n                        l += 1\n                        r -= 1\n                        while l &lt; r and nums[l] == nums[l - 1]:\n                            l += 1\n                        while l &lt; r and nums[r] == nums[r + 1]:\n                            r -= 1\n                    elif nums[i] + nums[l] + nums[r] &gt; 0:\n                        while l &lt; r:\n                            r -= 1\n                            if nums[r] &lt; nums[r + 1]:\n                                break\n                    else:\n                        while l &lt; r:\n                            l += 1\n                            if nums[l] &gt; nums[l - 1]:\n                                break\n\n        return ans\n</code></pre>"},{"location":"medium/#just-a-moment_1","title":"Just a moment...","text":"Solution in Python Python <pre><code>from typing import List\n\n\nclass Solution:\n    def threeSumClosest(self, nums: List[int], target: int) -&gt; int:\n        nums = sorted(nums)\n        ans = 0\n        mid = nums[len(nums) // 2]\n        min_diff = abs(nums[0] + mid + nums[len(nums) - 1] - target)\n\n        for i in range(len(nums) - 2):\n            l = i + 1\n            r = len(nums) - 1\n            while l &lt; r:\n                value = nums[i] + nums[l] + nums[r]\n                if value == target:\n                    return target\n                diff = abs(value - target)\n                if diff &lt;= min_diff:\n                    min_diff = diff\n                    ans = value\n                if value &gt; target:\n                    r -= 1\n                if value &lt; target:\n                    l += 1\n\n        return ans\n</code></pre>"},{"location":"medium/#just-a-moment_2","title":"Just a moment...","text":"Solution in Python Python <pre><code>from typing import List\n\n\nclass Solution:\n    def maxArea(self, height: List[int]) -&gt; int:\n        size = len(height)\n        l = 0\n        r = size - 1\n        maxWater = 0\n        while l &lt; r:\n            water = (r - l) * min(height[l], height[r])\n            if water &gt; maxWater:\n                maxWater = water\n\n            if height[l] &lt; height[r]:\n                l = l + 1\n            else:\n                r = r - 1\n\n        return maxWater\n</code></pre>"},{"location":"medium/#just-a-moment_3","title":"Just a moment...","text":"Solution in Python Python <pre><code>class Solution:\n    def intToRoman(self, num: int) -&gt; str:\n        value = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n        roman = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n        ans = \"\"\n        for i in range(len(value)):\n            while num &gt;= value[i]:\n                num -= value[i]\n                ans += roman[i]\n\n        return ans\n</code></pre>"},{"location":"medium/#just-a-moment_4","title":"Just a moment...","text":"Solution in Python Python <pre><code>from typing import List\n\n\nclass Solution:\n    def letterCombinations(self, digits: str) -&gt; List[str]:\n        if digits == \"\":\n            return []\n\n        phone_dict = {\n            \"2\": [\"a\", \"b\", \"c\"],\n            \"3\": [\"d\", \"e\", \"f\"],\n            \"4\": [\"g\", \"h\", \"i\"],\n            \"5\": [\"j\", \"k\", \"l\"],\n            \"6\": [\"m\", \"n\", \"o\"],\n            \"7\": [\"p\", \"q\", \"r\", \"s\"],\n            \"8\": [\"t\", \"u\", \"v\"],\n            \"9\": [\"w\", \"x\", \"y\", \"z\"],\n        }\n\n        def dfs(num, string, result):\n            if num == length:\n                result.append(string)\n                return\n            for letter in phone_dict[digits[num]]:\n                dfs(num + 1, string + letter, result)\n\n        result = []\n\n        length = len(digits)\n        dfs(0, \"\", result)\n\n        return result\n</code></pre>"},{"location":"medium/#just-a-moment_5","title":"Just a moment...","text":"Solution in Python Python <pre><code>class Solution:\n    def findPalindrome(self, s: str, l: int, r: int) -&gt; str:\n        while l &gt;= 0 and r &lt; len(s) and s[l] == s[r]:\n            l -= 1\n            r += 1\n        return s[l + 1 : r]\n\n    def longestPalindrome(self, s: str) -&gt; str:\n        result = \"\"\n        for i in range(len(s)):\n            # ABA\n            type1 = self.findPalindrome(s, i, i)\n            if len(type1) &gt; len(result):\n                result = type1\n            # ABBA\n            type2 = self.findPalindrome(s, i, i + 1)\n            if len(type2) &gt; len(result):\n                result = type2\n\n        return result\n</code></pre>"},{"location":"medium/#just-a-moment_6","title":"Just a moment...","text":"Solution in Python Python <pre><code>class Solution:\n    def lengthOfLongestSubstring(self, s: str) -&gt; int:\n        max_len = 0\n        substr = \"\"\n        rear = 0\n\n        for front in range(len(s)):\n            if s[front] not in substr:\n                substr += s[front]\n            else:\n                max_len = max(max_len, len(substr))\n                while s[rear] != s[front]:\n                    rear += 1\n                rear += 1\n                substr = s[rear : front + 1]\n\n        return max(max_len, len(substr))\n</code></pre>"},{"location":"medium/#just-a-moment_7","title":"Just a moment...","text":"Solution in Python Python <pre><code>class Solution:\n    def reverse(self, x: int) -&gt; int:\n        digits = str(x)[::-1]\n        ans = int(digits) if x &gt;= 0 else int(digits[:-1])\n        if ans &gt; 2**31:\n            ans = 0\n\n        return ans if x &gt; -0 else -ans\n</code></pre>"},{"location":"medium/#just-a-moment_8","title":"Just a moment...","text":"Solution in Python Python <pre><code>class Solution:\n    def convert(self, s: str, numRows: int) -&gt; str:\n        if numRows == 1:\n            return s\n\n        rows = []\n        a = 2 * numRows - 2\n        for i in range(a):\n            rows.append([])\n\n        for i in range(len(s)):\n            ind = i % a\n            if ind &gt;= numRows:\n                ind = a - ind\n            rows[ind].append(s[i])\n\n        result = \"\"\n        for i in range(a):\n            result += \"\".join(rows[i])\n\n        return result\n</code></pre>"}]}