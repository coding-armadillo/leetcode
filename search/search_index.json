{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"LeetCode","text":""},{"location":"#summary-by-difficulty","title":"Summary by Difficulty","text":"<ul> <li> <p>Easy 5</p> </li> <li> <p>Medium 9</p> </li> <li> <p>Hard 1</p> </li> </ul>"},{"location":"#summary-by-first-character","title":"Summary by First Character","text":""},{"location":"easy/","title":"Difficulty - Easy","text":""},{"location":"easy/#longest-common-prefix","title":"Longest Common Prefix","text":"Solution in Python Python <pre><code>from typing import List\nclass Solution:\ndef longestCommonPrefix(self, strs: List[str]) -&gt; str:\nlengths = [len(s) for s in strs]\nif 0 in lengths or not lengths:\nreturn \"\"\nelse:\nresult = \"\"\nindex = 0\nwhile index &lt; min(lengths):\ncharacter = set([s[index] for s in strs])\nif len(character) &gt; 1:\nbreak\nelse:\nresult += character.pop()\nindex += 1\nreturn result\n</code></pre>"},{"location":"easy/#palindrome-number","title":"Palindrome Number","text":"Solution in Python Python <pre><code>class Solution:\ndef isPalindrome(self, x: int) -&gt; bool:\nif x &lt; 0:\nreturn False\na = 1\nwhile x // a:\na *= 10\na //= 10\nwhile x:\nr = x % 10\nl = x // a\nif l != r:\nreturn False\nx = (x - l * a) // 10\na = a // 100\nreturn True\n</code></pre>"},{"location":"easy/#roman-to-integer","title":"Roman to Integer","text":"Solution in Python Python <pre><code>class Solution:\ndef romanToInt(self, s: str) -&gt; int:\nroman = {\"M\": 1000, \"D\": 500, \"C\": 100, \"L\": 50, \"X\": 10, \"V\": 5, \"I\": 1}\nsize = len(s)\nprev = None\nans = 0\ns = s[::-1]\nfor i in range(size):\nif prev and roman[s[i]] &lt; prev:\nans -= 2 * roman[s[i]]\nans += roman[s[i]]\nprev = roman[s[i]]\nreturn ans\n</code></pre>"},{"location":"easy/#two-sum","title":"Two Sum","text":"Solution in Python Python <pre><code>from typing import List\nclass Solution:\ndef twoSum(self, nums: List[int], target: int) -&gt; List[int]:\nt = {}\nl = len(nums)\nfor i in range(l):\nif nums[i] not in t:\nt[nums[i]] = [i]\nelse:\nt[nums[i]].append(i)\nfor i in range(l):\nlookup = target - nums[i]\nif lookup != nums[i]:\nif lookup in t:\nreturn (i, t[lookup][0])\nelse:\nif len(t[lookup]) &gt; 1:\nreturn (t[lookup][0], t[lookup][1])\n</code></pre>"},{"location":"easy/#valid-parentheses","title":"Valid Parentheses","text":"Solution in Python Python <pre><code>class Solution:\ndef isValid(self, s: str) -&gt; bool:\nstack = []\nfor char in s:\nif char in [\"(\", \"[\", \"{\"]:\nstack.append(char)\nelif char in [\")\", \"]\", \"}\"]:\nif len(stack) == 0:\nreturn False\nlast = stack.pop()\nif char == \")\" and last != \"(\":\nreturn False\nelif char == \"]\" and last != \"[\":\nreturn False\nelif char == \"}\" and last != \"{\":\nreturn False\nreturn len(stack) == 0\n</code></pre>"},{"location":"hard/","title":"Difficulty - Hard","text":""},{"location":"hard/#median-of-two-sorted-arrays","title":"Median of Two Sorted Arrays","text":"Solution in Python Python <pre><code>from typing import List\nclass Solution:\ndef getKth(self, nums1: List[int], nums2: List[int], k: int) -&gt; int:\nlen1 = len(nums1)\nlen2 = len(nums2)\nif len1 &gt; len2:\nreturn self.getKth(nums2, nums1, k)\nif len1 == 0:\nreturn nums2[k - 1]\nif k == 1:\nreturn min(nums1[0], nums2[0])\npa = min(k // 2, len1)\npb = k - pa\nif nums1[pa - 1] &lt;= nums2[pb - 1]:\nreturn self.getKth(nums1[pa:], nums2, pb)\nelse:\nreturn self.getKth(nums1, nums2[pb:], pa)\ndef findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -&gt; float:\nlen1 = len(nums1)\nlen2 = len(nums2)\nif (len1 + len2) % 2 == 1:\nreturn self.getKth(nums1, nums2, (len1 + len2) // 2 + 1)\nelse:\nreturn (\nself.getKth(nums1, nums2, (len1 + len2) // 2)\n+ self.getKth(nums1, nums2, (len1 + len2) // 2 + 1)\n) * 0.5\n</code></pre>"},{"location":"medium/","title":"Difficulty - Medium","text":""},{"location":"medium/#3sum","title":"3Sum","text":"Solution in Python Python <pre><code>from typing import List\nclass Solution:\ndef threeSum(self, nums: List[int]) -&gt; List[List[int]]:\nnums = sorted(nums)\nans = []\nfor i in range(len(nums) - 2):\nif i == 0 or nums[i] &gt; nums[i - 1]:\nl = i + 1\nr = len(nums) - 1\nwhile l &lt; r:\nif nums[i] + nums[l] + nums[r] == 0:\nans.append([nums[i], nums[l], nums[r]])\nl += 1\nr -= 1\nwhile l &lt; r and nums[l] == nums[l - 1]:\nl += 1\nwhile l &lt; r and nums[r] == nums[r + 1]:\nr -= 1\nelif nums[i] + nums[l] + nums[r] &gt; 0:\nwhile l &lt; r:\nr -= 1\nif nums[r] &lt; nums[r + 1]:\nbreak\nelse:\nwhile l &lt; r:\nl += 1\nif nums[l] &gt; nums[l - 1]:\nbreak\nreturn ans\n</code></pre>"},{"location":"medium/#3sum-closest","title":"3Sum Closest","text":"Solution in Python Python <pre><code>from typing import List\nclass Solution:\ndef threeSumClosest(self, nums: List[int], target: int) -&gt; int:\nnums = sorted(nums)\nans = 0\nmid = nums[len(nums) // 2]\nmin_diff = abs(nums[0] + mid + nums[len(nums) - 1] - target)\nfor i in range(len(nums) - 2):\nl = i + 1\nr = len(nums) - 1\nwhile l &lt; r:\nvalue = nums[i] + nums[l] + nums[r]\nif value == target:\nreturn target\ndiff = abs(value - target)\nif diff &lt;= min_diff:\nmin_diff = diff\nans = value\nif value &gt; target:\nr -= 1\nif value &lt; target:\nl += 1\nreturn ans\n</code></pre>"},{"location":"medium/#container-with-most-water","title":"Container With Most Water","text":"Solution in Python Python <pre><code>from typing import List\nclass Solution:\ndef maxArea(self, height: List[int]) -&gt; int:\nsize = len(height)\nl = 0\nr = size - 1\nmaxWater = 0\nwhile l &lt; r:\nwater = (r - l) * min(height[l], height[r])\nif water &gt; maxWater:\nmaxWater = water\nif height[l] &lt; height[r]:\nl = l + 1\nelse:\nr = r - 1\nreturn maxWater\n</code></pre>"},{"location":"medium/#integer-to-roman","title":"Integer to Roman","text":"Solution in Python Python <pre><code>class Solution:\ndef intToRoman(self, num: int) -&gt; str:\nvalue = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\nroman = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\nans = \"\"\nfor i in range(len(value)):\nwhile num &gt;= value[i]:\nnum -= value[i]\nans += roman[i]\nreturn ans\n</code></pre>"},{"location":"medium/#letter-combinations-of-a-phone-number","title":"Letter Combinations of a Phone Number","text":"Solution in Python Python <pre><code>from typing import List\nclass Solution:\ndef letterCombinations(self, digits: str) -&gt; List[str]:\nif digits == \"\":\nreturn []\nphone_dict = {\n\"2\": [\"a\", \"b\", \"c\"],\n\"3\": [\"d\", \"e\", \"f\"],\n\"4\": [\"g\", \"h\", \"i\"],\n\"5\": [\"j\", \"k\", \"l\"],\n\"6\": [\"m\", \"n\", \"o\"],\n\"7\": [\"p\", \"q\", \"r\", \"s\"],\n\"8\": [\"t\", \"u\", \"v\"],\n\"9\": [\"w\", \"x\", \"y\", \"z\"],\n}\ndef dfs(num, string, result):\nif num == length:\nresult.append(string)\nreturn\nfor letter in phone_dict[digits[num]]:\ndfs(num + 1, string + letter, result)\nresult = []\nlength = len(digits)\ndfs(0, \"\", result)\nreturn result\n</code></pre>"},{"location":"medium/#longest-palindromic-substring","title":"Longest Palindromic Substring","text":"Solution in Python Python <pre><code>class Solution:\ndef findPalindrome(self, s: str, l: int, r: int) -&gt; str:\nwhile l &gt;= 0 and r &lt; len(s) and s[l] == s[r]:\nl -= 1\nr += 1\nreturn s[l + 1 : r]\ndef longestPalindrome(self, s: str) -&gt; str:\nresult = \"\"\nfor i in range(len(s)):\n# ABA\ntype1 = self.findPalindrome(s, i, i)\nif len(type1) &gt; len(result):\nresult = type1\n# ABBA\ntype2 = self.findPalindrome(s, i, i + 1)\nif len(type2) &gt; len(result):\nresult = type2\nreturn result\n</code></pre>"},{"location":"medium/#longest-substring-without-repeating-characters","title":"Longest Substring Without Repeating Characters","text":"Solution in Python Python <pre><code>class Solution:\ndef lengthOfLongestSubstring(self, s: str) -&gt; int:\nmax_len = 0\nsubstr = \"\"\nrear = 0\nfor front in range(len(s)):\nif s[front] not in substr:\nsubstr += s[front]\nelse:\nmax_len = max(max_len, len(substr))\nwhile s[rear] != s[front]:\nrear += 1\nrear += 1\nsubstr = s[rear : front + 1]\nreturn max(max_len, len(substr))\n</code></pre>"},{"location":"medium/#reverse-integer","title":"Reverse Integer","text":"Solution in Python Python <pre><code>class Solution:\ndef reverse(self, x: int) -&gt; int:\ndigits = str(x)[::-1]\nans = int(digits) if x &gt;= 0 else int(digits[:-1])\nif ans &gt; 2**31:\nans = 0\nreturn ans if x &gt; -0 else -ans\n</code></pre>"},{"location":"medium/#zigzag-conversion","title":"Zigzag Conversion","text":"Solution in Python Python <pre><code>class Solution:\ndef convert(self, s: str, numRows: int) -&gt; str:\nif numRows == 1:\nreturn s\nrows = []\na = 2 * numRows - 2\nfor i in range(a):\nrows.append([])\nfor i in range(len(s)):\nind = i % a\nif ind &gt;= numRows:\nind = a - ind\nrows[ind].append(s[i])\nresult = \"\"\nfor i in range(a):\nresult += \"\".join(rows[i])\nreturn result\n</code></pre>"}]}